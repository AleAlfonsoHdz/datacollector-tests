# Copyright 2020 StreamSets Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import os
import string

from streamsets.testframework.markers import cluster, azure, sdc_min_version
from streamsets.testframework.utils import get_random_string

logger = logging.getLogger(__name__)


@sdc_min_version("3.19.0")
def test_file_event_filepath_when_whole_file_mode_disabled(sdc_builder, sdc_executor):
    """
    We want to make sure that the filepath attribute of an event generated by the LocalFS destination contains only
    a file path and doesn't contain a schema. A misbehaviour normally happened before when an old file was found
    during a pipelined start-up. This wasn't observed for events that were sent for files created during pipeline
    execution. The goal is to make the behaviour consistent, and since the name of the attribute is the filepath
    not URI we decided to remove the schema part from it.

    Pipeline:
              Dev Raw Data Source >> Local FS >= Trash

    When the pipeline stops we assert the filepath attribute of the event generate by LocalFS.
    """

    builder = sdc_builder.get_pipeline_builder()

    data_source = builder.add_stage('Dev Raw Data Source')
    data_source.stop_after_first_batch = True
    data_source.data_format = 'DELIMITED'
    data_source.delimiter_format_type = 'CUSTOM'
    data_source.header_line = 'WITH_HEADER'
    data_source.raw_data = 'HEADER\nVALUE\n'

    fs = builder.add_stage('Local FS')
    fs.directory_template = f'/tmp/{get_random_string(string.ascii_letters)}'
    fs.files_prefix = 'sdc'
    fs.data_format = 'DELIMITED'
    fs.delimiter_format = 'CUSTOM'
    fs.header_line = 'WITH_HEADER'

    trash = builder.add_stage('Trash')

    data_source >> fs >= trash

    pipeline = builder.build().configure_for_environment()
    sdc_executor.add_pipeline(pipeline)

    try:
        sdc_executor.execute_shell(f'mkdir -p {fs.directory_template}')
        sdc_executor.write_file(os.path.join(fs.directory_template, '_tmp_sdc_0'), 'HEADER\nDATA\n')

        snapshot = sdc_executor.capture_snapshot(pipeline=pipeline, start_pipeline=True).snapshot
        sdc_executor.get_pipeline_status(pipeline).wait_for_status('FINISHED')
        history = sdc_executor.get_pipeline_history(pipeline)
        pipeline_record_count = history.latest.metrics.counter('pipeline.batchOutputRecords.counter').count
        stage = snapshot[fs.instance_name]
        stage_record_count = len(stage.event_records)

        assert stage_record_count == 1
        assert pipeline_record_count == stage_record_count + 1
        for event_record in stage.event_records:
            assert event_record.get_field_data('/filepath').value.startswith(f'{fs.directory_template}/sdc_')

    finally:
        sdc_executor.execute_shell(f'rm -fr {fs.directory_template}')


def test_file_event_filepath_when_whole_file_mode_enabled(sdc_builder, sdc_executor):
    """
    We want to make sure that the /targetFileInfo/path and /sourceFileInfo/file attributes of the event generated by
    the LocalFS destination in the WHOLE_FILE mode contains only a file path and doesn't contain schema.
    A misbehaviour was not observed before for the WHOLE_FILE mode. The goal is to make sure the behaviour
    is not broken by the fix.

    Pipeline:
              Directory >> Local FS >= Trash

    Before starting the pipeline we put a file to the source directory, this is the new file.
    We also put a file to the destination folder, this is the "old" file.
    When the pipeline stops we assert the /targetFileInfo/path and /sourceFileInfo/file attributes of the event
    generated by LocalFS.
    """

    base_folder = f'/tmp/{get_random_string(string.ascii_letters)}'

    builder = sdc_builder.get_pipeline_builder()

    src = builder.add_stage('Directory')
    src.files_directory = f'{base_folder}/input'
    src.file_name_pattern = '*'
    src.data_format = 'WHOLE_FILE'
    src.batch_size_in_recs = 1
    src.batch_wait_time_in_secs = 1

    fs = builder.add_stage('Local FS')
    fs.directory_template = f'{base_folder}/output'
    fs.files_prefix = 'sdc'
    fs.file_name_expression = '-output'
    fs.data_format = 'WHOLE_FILE'
    fs.file_type = 'WHOLE_FILE'

    dst = builder.add_stage('Trash')

    src >> fs >= dst

    pipeline = builder.build().configure_for_environment()
    sdc_executor.add_pipeline(pipeline)

    try:
        sdc_executor.execute_shell(f'mkdir -p {src.files_directory}')
        sdc_executor.execute_shell(f'mkdir -p {fs.directory_template}')

        sdc_executor.write_file(os.path.join(src.files_directory, 'input.txt'), 'HEADER\nVALUE\n')
        sdc_executor.write_file(os.path.join(fs.directory_template, '_tmp_sdc-output'), 'HEADER\nDATA\n')

        snapshot = sdc_executor.capture_snapshot(pipeline=pipeline, start_pipeline=True, batches=1).snapshot
        sdc_executor.stop_pipeline(pipeline, force=True)
        history = sdc_executor.get_pipeline_history(pipeline)
        pipeline_record_count = history.latest.metrics.counter('pipeline.batchOutputRecords.counter').count
        stage = snapshot[fs.instance_name]
        stage_record_count = len(stage.event_records)

        assert stage_record_count == 1
        assert pipeline_record_count == stage_record_count + 1
        for event_record in stage.event_records:
            assert event_record.get_field_data('/targetFileInfo/path').value == f'{fs.directory_template}/sdc-output'
            assert event_record.get_field_data('/sourceFileInfo/file').value == f'{src.files_directory}/input.txt'

    finally:
        sdc_executor.execute_shell(f'rm -fr {base_folder}')
